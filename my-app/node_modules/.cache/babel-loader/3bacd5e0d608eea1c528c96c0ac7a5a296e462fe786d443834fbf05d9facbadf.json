{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anemi\\\\OneDrive\\\\Documents\\\\GitHub\\\\MyApp\\\\my-app\\\\src\\\\components\\\\PieChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport Chart from 'chart.js/auto'; // Import Chart from Chart.js library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PieChart({\n  character1,\n  character2,\n  characterDetails\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [canvasKey, setCanvasKey] = useState(Date.now());\n  useEffect(() => {\n    const countVisionData = () => {\n      const dataCounts = {\n        Pyro: 0,\n        Cryo: 0,\n        Hydro: 0,\n        Electro: 0,\n        Anemo: 0,\n        Geo: 0\n      };\n      [character1, character2].forEach(characterName => {\n        const character = characterDetails.find(char => char.name === characterName);\n        if (character) {\n          dataCounts[character.vision]++;\n        }\n      });\n      return dataCounts;\n    };\n    const dataCounts = countVisionData();\n    if (chartInstance) {\n      chartInstance.data.datasets[0].data = Object.values(dataCounts);\n      chartInstance.update();\n    } else {\n      var _chartRef$current;\n      const ctx = (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.getContext('2d');\n      const newChartInstance = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: ['Pyro', 'Cryo', 'Hydro', 'Electro', 'Anemo', 'Geo'],\n          datasets: [{\n            data: Object.values(dataCounts),\n            backgroundColor: ['orangered', 'white', 'aqua', 'purple', 'green', 'darkgoldenrod']\n          }]\n        },\n        options: {\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: 'Vision Distribution'\n            }\n          }\n        }\n      });\n      setChartInstance(newChartInstance);\n    }\n    return () => {\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, [character1, character2, characterDetails, canvasKey]);\n\n  // Cleanup previous chart instance when component unmounts\n  useEffect(() => {\n    return () => {\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, []);\n\n  // Force re-render the canvas by updating the key when the component updates\n  useEffect(() => {\n    setCanvasKey(Date.now());\n  }, [character1, character2, characterDetails]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pie-chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        width: '50%',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(PieChart, \"W1L0frC3Ioh/a9+R2fXlLkq7GXY=\");\n_c = PieChart;\nexport default PieChart;\nvar _c;\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Chart","jsxDEV","_jsxDEV","PieChart","character1","character2","characterDetails","_s","chartRef","chartInstance","setChartInstance","canvasKey","setCanvasKey","Date","now","countVisionData","dataCounts","Pyro","Cryo","Hydro","Electro","Anemo","Geo","forEach","characterName","character","find","char","name","vision","data","datasets","Object","values","update","_chartRef$current","ctx","current","getContext","newChartInstance","type","labels","backgroundColor","options","plugins","legend","display","position","title","text","destroy","className","children","style","padding","width","margin","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/anemi/OneDrive/Documents/GitHub/MyApp/my-app/src/components/PieChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport Chart from 'chart.js/auto'; // Import Chart from Chart.js library\r\n\r\nfunction PieChart({ character1, character2, characterDetails }) {\r\n  const chartRef = useRef(null);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n  const [canvasKey, setCanvasKey] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const countVisionData = () => {\r\n      const dataCounts = { Pyro: 0, Cryo: 0, Hydro: 0, Electro: 0, Anemo: 0, Geo: 0 };\r\n      [character1, character2].forEach(characterName => {\r\n        const character = characterDetails.find(char => char.name === characterName);\r\n        if (character) {\r\n          dataCounts[character.vision]++;\r\n        }\r\n      });\r\n      return dataCounts;\r\n    };\r\n\r\n    const dataCounts = countVisionData();\r\n\r\n    if (chartInstance) {\r\n      chartInstance.data.datasets[0].data = Object.values(dataCounts);\r\n      chartInstance.update();\r\n    } else {\r\n      const ctx = chartRef.current?.getContext('2d');\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: ['Pyro', 'Cryo', 'Hydro', 'Electro', 'Anemo', 'Geo'],\r\n          datasets: [\r\n            {\r\n              data: Object.values(dataCounts),\r\n              backgroundColor: ['orangered', 'white', 'aqua', 'purple', 'green', 'darkgoldenrod'],\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'top',\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Vision Distribution',\r\n            },\r\n          },\r\n        },\r\n      });\r\n      setChartInstance(newChartInstance);\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstance) {\r\n        chartInstance.destroy();\r\n      }\r\n    };\r\n  }, [character1, character2, characterDetails, canvasKey]);\r\n\r\n  // Cleanup previous chart instance when component unmounts\r\n  useEffect(() => {\r\n    return () => {\r\n      if (chartInstance) {\r\n        chartInstance.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Force re-render the canvas by updating the key when the component updates\r\n  useEffect(() => {\r\n    setCanvasKey(Date.now());\r\n  }, [character1, character2, characterDetails]);\r\n\r\n  return (\r\n    <div className=\"pie-chart-container\">\r\n      <div style={{ padding: '20px', width: '50%', margin: 'auto' }}>\r\n        <canvas key={canvasKey} ref={chartRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}